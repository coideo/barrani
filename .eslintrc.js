const RULES = {
  ERROR: 'error',
  OFF: 'off',
  WARN: 'warn',
};

module.exports = {
  env: {
    browser: true,
    es2020: true,
    jest: true,
    node: true,
  },
  extends: [
    'plugin:react/recommended',
    'plugin:react-hooks/recommended',
    'plugin:jsx-a11y/recommended',
    "plugin:@typescript-eslint/recommended",
    "standard-with-typescript",
    "plugin:prettier/recommended",
  ],
  ignorePatterns: [
    '.eslintrc.js',
    'babel.config.js',
    'coverage',
    'jest.config.js',
    'postcss.config.js',
    'rollup.config.js',
    'tailwind.config.js',
  ],
  parser: "@typescript-eslint/parser",
  parserOptions: {
    ecmaFeatures: { jsx: true },
    ecmaVersion: 12,
    sourceType: 'module',
    project: './tsconfig.json',
  },
  plugins: ['react', 'jsx-a11y',"prettier", "import",'@typescript-eslint'],
  rules: {
    '@typescript-eslint/consistent-type-definitions': RULES.OFF,
    '@typescript-eslint/explicit-function-return-type': RULES.OFF,
    '@typescript-eslint/explicit-module-boundary-types': RULES.OFF,
    '@typescript-eslint/no-invalid-void-type': RULES.OFF,
    "@typescript-eslint/no-unnecessary-condition": RULES.ERROR,
    "@typescript-eslint/no-unused-vars": [
      RULES.ERROR,
      {
        args: "after-used",
        ignoreRestSiblings: false,
        argsIgnorePattern: "^_.*?$",
      },
    ],
    '@typescript-eslint/no-use-before-define': [RULES.ERROR],
    '@typescript-eslint/no-var-requires': RULES.OFF,
    '@typescript-eslint/strict-boolean-expressions': RULES.OFF,
    'jsx-a11y/accessible-emoji': RULES.OFF,
    'jsx-a11y/anchor-is-valid': RULES.OFF,
    'no-console': RULES.WARN,
    'no-nested-ternary': RULES.OFF,
    'no-unused-vars': RULES.OFF,
    'no-use-before-define': RULES.OFF,
    'react/jsx-curly-newline': RULES.OFF,
    'react/jsx-props-no-spreading': RULES.OFF,
    'react/jsx-wrap-multilines': RULES.OFF,
    'react/no-unknown-property': [RULES.WARN, {}],
    'react/prop-types': RULES.OFF,
    'react/react-in-jsx-scope': RULES.OFF,
    'react/require-default-props': RULES.OFF,
    "prettier/prettier": [
      RULES.WARN,
      {
        printWidth: 100,
        trailingComma: "all",
        tabWidth: 2,
        semi: true,
        singleQuote: false,
        arrowParens: "always",
        endOfLine: "auto",
      },
    ],
    "import/order": [
      RULES.WARN,
      {
        groups: [
          "type",
          "builtin",
          "object",
          "external",
          "internal",
          "parent",
          "sibling",
          "index",
        ],
        pathGroups: [
          {
            pattern: "~/**",
            group: "external",
            position: "after",
          },
        ],
        "newlines-between": "always",
      },
    ],
    "react/self-closing-comp": RULES.WARN,
    "react/jsx-sort-props": [
      RULES.WARN,
      {
        callbacksLast: true,
        shorthandFirst: true,
        noSortAlphabetically: false,
        reservedFirst: true,
      },
    ],
    "padding-line-between-statements": [
      RULES.WARN,
      { blankLine: "always", prev: "*", next: "return" },
      { blankLine: "always", prev: ["const", "let", "var"], next: "*" },
      {
        blankLine: "any",
        prev: ["const", "let", "var"],
        next: ["const", "let", "var"],
      },
    ],
  },
  settings: { react: { version: 'detect' } },
};
